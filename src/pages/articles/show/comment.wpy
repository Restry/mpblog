<style lang="less">
  page, .page, .page__bd {
    background-color: #fff;
    height: 100vh;
  }

  .page__bd {
    display: -webkit-flex;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .commentable {
    navigator {
      color: #595959 !important;
      background-color: #f2f2f2;
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }

    .commentable-title {
      font-size: 14px;
      flex: 1;
      display: -webkit-box;
      overflow: hidden;
      text-overflow: ellipsis;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 2;
      line-height: 1.4;
    }

    .commentable-thumb {
      padding: 6px;
    }

    .commentable-thumb, .commentable-thumb image {
      width: 55px;
      height: 40px;
    }

    .commentable-thumb-default, .commentable-thumb-default image {
      width: 50px;
      height: 50px;
    }
  }

  .top-comment {
    background-color: #fffbe6;
  }

  .content-wrap {
    flex: 1;
    overflow: hidden;
  }

  .comments {
    border-top: 1px solid #d7d6dc;
    /*padding-top: 8px;*/
  }

  .form-wrap {
    border-top: 1px solid #d7d6dc;
    padding: 8px 10px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }

  .textarea {
    background-color: #efeff4;
    border-radius: 4px;
    font-size: 14px;
    flex: 1;
    padding: 8px;
  }

  .ios__textarea {
    padding: 0;
  }

  .form-actions-wrap {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding-left: 4px;

    .action {
      margin: 0 8px;

      &:last-child {
        margin-right: 0;
      }
    }

    .message {
      position: relative;
      display: flex;
      align-items: center;

      .badge {
        position: absolute;
        top: -6px;
        left: 14px;
      }
    }

    .submit {
      color: #13C2C2;
    }

    .disabled {
      color: rgba(0, 0, 0, 0.3);
    }
  }

  .form-actions-wrap image {
    width: 24px !important;
    height: 24px !important;
  }
</style>

<template>
  <view class="page">
    <view class="page__bd">
      <loading :show="fetchingComment"></loading>
      <view v-show="!fetchingComment" class="content-wrap">
        <scroll-view
          style="height: 100%"
          :scroll-y="true"
          :scroll-with-animation="true"
          :scroll-anchoring="true"
          :enable-back-to-top="true"
          :scroll-into-view="anchor"
          @scrolltolower="appendFetchComments"
        >
          <view class="content" id="content">
            <comment
              :comment="comment"
              :authorized="authorized"
              :id="'comment-'+comment.id"
              :hideReplyCountClass="true"
              @comment-tap="onCommentTap"
            >
              <view v-if="comment.commentable" slot="commentable" class="commentable">
                <navigator url="index?id={{comment.commentable_id}}">
                  <view v-if="comment.commentable.images.length > 0" class="commentable-thumb">
                    <image src="{{comment.commentable.images[0]}}"></image>
                  </view>
                  <view v-else class="commentable-thumb-default">
                    <image src="../../../static/png/article_80x80.png" />
                  </view>
                  <view class="commentable-title">{{comment.commentable.title}}</view>
                </navigator>
              </view>
            </comment>
          </view>

          <view class="comments" id="comments">
            <view
              v-for="item in comments"
              :class="{ 'top-comment': item.id === top_comment }"
              :id="'comment-'+item.id"
            >
              <comment
                :comment="item"
                :authorized="authorized"
                @comment-tap="onCommentTap"
              >
              </comment>
            </view>
            <loading :show="loading"></loading>
            <view v-show="noMore" class="weui-loadmore weui-loadmore_line">
              <view class="weui-loadmore__tips weui-loadmore__tips_in-line">加载完毕</view>
            </view>
          </view>
        </scroll-view>
      </view>

      <authorized-check :authorized="authorized">
        <view class="form-wrap">
          <textarea
            class="textarea {{ systemInfo.platform }}__textarea"
            :placeholder="!parent.id || parent.id === comment.id ? '写评论...': '@'+parent.user.username"
            v-model="commentContent"
            :auto-height="true"
            :show-confirm-bar="false"
            :focus="textareaFocus"
            @focus="onTextareaFocus"
          >
          </textarea>
          <view v-show="!textareaFocus" class="form-actions-wrap">
            <view class="action message">
              <image src="../../../static/png/message_81x81.png"></image>
            </view>
          </view>

          <view v-show="textareaFocus" class="form-actions-wrap">
            <view
              class="action submit"
              :class="{disabled: commentContent.length <= 0}"
              @tap="submitComment"
            >
              发布
            </view>
          </view>
        </view>
      </authorized-check>
    </view>
  </view>
</template>

<script>
  import wepy from '@wepy/core';
  import unionBy from 'lodash/unionBy';
  import Debounce from 'lodash-decorators/debounce';
  import mapAuthState from '@/mixins/mapAuthState';
  import { matchImages } from '@/utils/utils';
  import * as services from './services';

  const defaultCommentQueryParams = {
    include: 'user',
    htmltowxml: 1,
  };

  const defaultCommentsQueryParams = {
    ...defaultCommentQueryParams,
    include: 'user,parent.user',
  };

  wepy.page({
    mixins: [mapAuthState],

    data: {
      systemInfo: {},
      article_id: 0,
      comment_id: 0,
      comment: {},
      comments: [],
      meta: {
        current_page: 0,
      },
      parent: {},
      commentContent: '',
      textareaFocus: false,
      fetchingComment: false,
      loading: false,
      submittingComment: false,
      anchor: '',
      top_comment: 0,
    },

    computed: {
      noMore () {
        return (
          this.meta.current_page >= 1 &&
          this.meta.current_page >= this.meta.last_page
        );
      },
    },

    methods: {
      async fetchComment (params) {
        this.fetchingComment = true;
        try {
          const { data: comment } = await services.queryArticleComment(
            this.article_id,
            this.comment_id,
            { ...defaultCommentQueryParams, ...params },
          );

          if (comment.commentable) {
            comment.commentable = this.mapMatchImages(comment.commentable);
          }

          this.comment = comment;
        } finally {
          this.fetchingComment = false;
        }
      },

      async fetchComments () {
        this.loading = true;

        try {
          const params = {
            ...defaultCommentsQueryParams,
            root_id: this.comment_id,
          };

          if (this.top_comment) {
            params.top_comment = this.top_comment;
          }

          const { data: comments, meta } = await services.queryArticleComments(this.article_id, params);
          this.comments = comments;
          this.meta = meta;
        } finally {
          this.loading = false;
        }
      },

      @Debounce(200)
      async appendFetchComments () {
        if (this.loading || this.noMore) return;

        this.loading = true;

        try {
          const { data: comments, meta } = await services.queryArticleComments(this.id, {
            ...defaultCommentsQueryParams,
            root_id: this.comment_id,
            page: this.meta.current_page + 1,
          });
          this.comments = unionBy(this.comments.concat(comments), 'id');
          this.meta = meta;
        } finally {
          this.loading = false;
        }
      },

      @Debounce(600)
      async submitComment () {
        if (this.commentContent.length <= 0 || this.submittingComment) return;
        this.submittingComment = true;

        try {
          const { data: comment } = await services.postArticleComment(this.article_id, {
            ...defaultCommentsQueryParams,
            parent_id: this.parent.id || this.comment.id,
            content: { markdown: this.commentContent },
          });
          this.comments = [comment].concat(this.comments);
          this.commentContent = '';

          this.onTextareaBlur();

          setTimeout(() => this.anchor = `comment-${comment.id}`, 0);

          wx.showToast({
            title: '评论成功！',
            icon: 'none',
          });
        } finally {
          this.submittingComment = false;
        }
      },

      mapMatchImages (commentable = {}) {
        const images = matchImages(commentable.content.markdown);

        if (images.length === 0 && commentable.preview) {
          images.unshift(commentable.preview);
        }

        commentable.images = images.slice(0, 1);
        return commentable;
      },

      onCommentTap (comment) {
        if (this.textareaFocus) {
          this.parent = this.comment;
          this.onTextareaBlur();
          return;
        }
        this.parent = comment;
        this.onTextareaFocus();
      },

      anchorToggle () {
        this.anchor = this.anchor !== 'comments' ? 'comments' : 'content';
      },

      onTextareaFocus () {
        this.textareaFocus = true;
      },

      onTextareaBlur () {
        this.textareaFocus = false;
      },
    },

    created () {
      this.systemInfo = wx.getSystemInfoSync();
    },

    async onLoad ({ article_id, comment_id, with_commentable, top_comment = 0 }) {
      this.article_id = Number(article_id);
      this.comment_id = Number(comment_id);
      this.top_comment = Number(top_comment);

      const fetchCommentParams = { include: defaultCommentQueryParams.include };
      if (with_commentable) {
        fetchCommentParams.include += ',commentable';
      }

      const fetchCommentPromise = this.fetchComment(fetchCommentParams);
      const fetchCommentsPromise = this.fetchComments();

      await fetchCommentPromise;
      await fetchCommentsPromise;

      if (top_comment) {
        setTimeout(() => this.anchor = `comment-${top_comment}`, 0);
      }
    },
  });
</script>

<config>
  {
    usingComponents: {
      loading: '~@/components/weui/loading/loading',
      comment: '~@/components/comment',
    },
    navigationBarTitleText: '评论详情',
  }
</config>
